"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

var _pandaAuthHeader = require("panda-auth-header");

var _logger = _interopRequireDefault(require("./logger"));

var _responses = _interopRequireDefault(require("./responses"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Cache,
    NotModified,
    UnsupportedMediaType,
    md5,
    method,
    indexOf = [].indexOf;
({
  NotModified,
  UnsupportedMediaType
} = _responses.default);

md5 = function (obj) {
  return _crypto.default.createHash('md5').update(JSON.stringify(obj), 'utf-8').digest("hex");
};

Cache = class Cache {
  constructor(request) {
    var ref, ref1, ref2, ref3;

    _logger.default.debug("Cache Headers:", request.headers);

    this.timestamp = null;
    this.inputTime = ((ref = request.headers) != null ? ref["if-modified-since"] : void 0) || ((ref1 = request.headers) != null ? ref1["If-Modified-Since"] : void 0);
    this.inputETag = ((ref2 = request.headers) != null ? ref2["if-none-match"] : void 0) || ((ref3 = request.headers) != null ? ref3["If-None-Match"] : void 0);
  }

  timeCheck(timestamp) {
    timestamp = new Date(Number(timestamp)).toUTCString();

    if (timestamp === this.inputTime) {
      throw new NotModified();
    } else {
      return this.timestamp = timestamp;
    }
  }

  hashCheck(content) {
    var etag;
    etag = md5(content);

    if (etag === this.inputETag) {
      throw new NotModified();
    } else {
      this.etag = etag;
    }

    return content;
  }

  setMaxAge(maxAge) {
    return this.maxAge = maxAge;
  }

};

method = function (signatures, handler) {
  // TODO: parse Accept header
  return async function (request, context) {
    var accept, base, cache, data, etag, header, lastModified, maxAge, metadata, params, ref, ref1, ref2, scheme, token;

    if (request.source === "cuddle-monkey") {
      _logger.default.debug("Detected a Cuddle Monkey preheater invocation. Short circuting request cycle.");

      return true;
    }

    if ((header = (ref = request.headers) != null ? ref['Authorization'] : void 0) != null) {
      ({
        scheme,
        params,
        token
      } = (0, _pandaAuthHeader.parse)(header));

      if (token) {
        request.authorization = {
          scheme,
          token
        };
      } else {
        request.authorization = {
          scheme,
          params
        };
      }
    }

    request.accept = "application/json";

    if ((header = ((ref1 = request.headers) != null ? ref1['accept'] : void 0) || ((ref2 = request.headers) != null ? ref2['Accept'] : void 0)) != null) {
      accept = header.split(",")[0];

      if ((base = signatures.response).mediatype == null) {
        base.mediatype = ["application/json"];
      }

      if (accept === "*/*") {
        request.accept = "applicaton/json";
      } else if (indexOf.call(signatures.response.mediatype, accept) < 0) {
        throw new UnsupportedMediaType(accept);
      } else {
        request.accept = accept;
      }
    }

    if (!signatures.response.cache) {
      return {
        data: await handler(request, context),
        metadata: {
          headers: {
            "Content-Type": request.accept
          }
        }
      };
    }

    ({
      maxAge,
      lastModified,
      etag
    } = signatures.response.cache);
    cache = new Cache(request);
    data = await handler(request, context, cache);
    metadata = {
      headers: {
        "Content-Type": request.accept
      }
    };

    if (maxAge === "manual") {
      metadata.headers["Cache-Control"] = `max-age=${cache.maxAge}`;
    } else {
      metadata.headers["Cache-Control"] = `max-age=${maxAge}`;
    }

    if (lastModified) {
      metadata.headers["Last-Modified"] = cache.timestamp;
    }

    if (etag) {
      metadata.headers.ETag = cache.etag || md5(data);
    }

    return {
      data,
      metadata
    };
  };
};

var _default = method;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=method.coffee