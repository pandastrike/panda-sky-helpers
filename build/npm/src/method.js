"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

var _pandaAuthHeader = require("panda-auth-header");

var _logger = _interopRequireDefault(require("./logger"));

var _responses = _interopRequireDefault(require("./responses"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Cache, NotModified, md5, method;
({
  NotModified
} = _responses.default);

md5 = function (obj) {
  return _crypto.default.createHash('md5').update(JSON.stringify(obj), 'utf-8').digest("hex");
};

Cache = class Cache {
  constructor(request) {
    var ref, ref1, ref2, ref3;

    _logger.default.debug("Cache Headers:", request.headers);

    this.timestamp = null;
    this.inputTime = ((ref = request.headers) != null ? ref["if-modified-since"] : void 0) || ((ref1 = request.headers) != null ? ref1["If-Modified-Since"] : void 0);
    this.inputETag = ((ref2 = request.headers) != null ? ref2["if-none-match"] : void 0) || ((ref3 = request.headers) != null ? ref3["If-None-Match"] : void 0);
  }

  timeCheck(timestamp) {
    timestamp = new Date(Number(timestamp)).toUTCString();

    if (timestamp === this.inputTime) {
      throw new NotModified();
    } else {
      return this.timestamp = timestamp;
    }
  }

  hashCheck(content) {
    var etag;
    etag = md5(content);

    if (etag === this.inputETag) {
      throw new NotModified();
    } else {
      this.etag = etag;
    }

    return content;
  }

};

method = function (signatures, handler) {
  // TODO: parse Accept header
  return async function (request, context) {
    var cache, data, etag, header, lastModified, metadata, params, ref, scheme, token;

    if (request.source === "cuddle-monkey") {
      _logger.default.debug("Detected a Cuddle Monkey preheater invocation. Short circuting request cycle.");

      return true;
    }

    if ((header = (ref = request.headers) != null ? ref['Authorization'] : void 0) != null) {
      ({
        scheme,
        params,
        token
      } = (0, _pandaAuthHeader.parse)(header));

      if (token) {
        request.authorization = {
          scheme,
          token
        };
      } else {
        request.authorization = {
          scheme,
          params
        };
      }
    }

    if (!signatures.response.cache) {
      return {
        data: await handler(request, context)
      };
    }

    ({
      lastModified,
      etag
    } = signatures.response.cache);
    cache = new Cache(request);
    data = await handler(request, context, cache);
    metadata = {
      headers: {}
    };

    if (lastModified) {
      metadata.headers["Last-Modified"] = cache.timestamp;
    }

    if (etag) {
      metadata.headers.ETag = cache.etag || md5(data);
    }

    return {
      data,
      metadata
    };
  };
};

var _default = method;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,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QTFCOztBQUNBLFVBQUEsS0FBQSxFQUFBO0FBQ0UsUUFBQSxPQUFPLENBQVAsYUFBQSxHQUF3QjtBQUFBLFVBQUEsTUFBQTtBQUQxQixVQUFBO0FBQzBCLFNBQXhCO0FBREYsT0FBQSxNQUFBO0FBR0UsUUFBQSxPQUFPLENBQVAsYUFBQSxHQUF3QjtBQUFBLFVBQUEsTUFBQTtBQUgxQixVQUFBO0FBRzBCLFNBQXhCO0FBTEo7OztBQVFBLFFBQUcsQ0FBQyxVQUFVLENBQUMsUUFBWCxDQUFKLEtBQUEsRUFBQTtBQUNFLGFBQU87QUFBQSxRQUFBLElBQUEsRUFBTSxNQUFNLE9BQUEsQ0FBQSxPQUFBLEVBQU4sT0FBTTtBQUFaLE9BQVA7OztBQUVGLEtBQUE7QUFBQSxNQUFBLFlBQUE7QUFBQSxNQUFBO0FBQUEsUUFBdUIsVUFBVSxDQUFDLFFBQVgsQ0FBdkIsS0FBQTtBQUNBLElBQUEsS0FBQSxHQUFRLElBQUEsS0FBQSxDQUFBLE9BQUEsQ0FBUjtBQUNBLElBQUEsSUFBQSxHQUFPLE1BQU0sT0FBQSxDQUFBLE9BQUEsRUFBQSxPQUFBLEVBQU4sS0FBTSxDQUFiO0FBQ0EsSUFBQSxRQUFBLEdBQVc7QUFBQSxNQUFBLE9BQUEsRUFBUztBQUFULEtBQVg7O0FBQ0EsUUFBQSxZQUFBLEVBQUE7QUFDRSxNQUFBLFFBQVEsQ0FBQyxPQUFULENBQUEsZUFBQSxJQUFvQyxLQUFLLENBRDNDLFNBQ0U7OztBQUNGLFFBQUEsSUFBQSxFQUFBO0FBQ0UsTUFBQSxRQUFRLENBQUMsT0FBVCxDQUFBLElBQUEsR0FBd0IsS0FBSyxDQUFMLElBQUEsSUFBYyxHQUFBLENBRHhDLElBQ3dDLENBQXRDOzs7QUFFRixXQUFPO0FBQUEsTUFBQSxJQUFBO0FBQUEsTUFBQTtBQUFBLEtBQVA7QUF6QkYsRztBQUZPLENBQVQ7O2VBNkJlLE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ3J5cHRvIGZyb20gXCJjcnlwdG9cIlxuaW1wb3J0IHtwYXJzZX0gZnJvbSBcInBhbmRhLWF1dGgtaGVhZGVyXCJcbmltcG9ydCBsb2cgZnJvbSBcIi4vbG9nZ2VyXCJcbmltcG9ydCByZXNwb25zZXMgZnJvbSBcIi4vcmVzcG9uc2VzXCJcbntOb3RNb2RpZmllZH0gPSByZXNwb25zZXNcblxubWQ1ID0gKG9iaikgLT5cbiAgQ3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZShKU09OLnN0cmluZ2lmeShvYmopLCAndXRmLTgnKS5kaWdlc3QoXCJoZXhcIilcblxuY2xhc3MgQ2FjaGVcbiAgY29uc3RydWN0b3I6IChyZXF1ZXN0KSAtPlxuICAgIGxvZy5kZWJ1ZyBcIkNhY2hlIEhlYWRlcnM6XCIsIHJlcXVlc3QuaGVhZGVyc1xuICAgIEB0aW1lc3RhbXAgPSBudWxsXG4gICAgQGlucHV0VGltZSA9IHJlcXVlc3QuaGVhZGVycz9bXCJpZi1tb2RpZmllZC1zaW5jZVwiXSB8fCByZXF1ZXN0LmhlYWRlcnM/W1wiSWYtTW9kaWZpZWQtU2luY2VcIl1cbiAgICBAaW5wdXRFVGFnID0gcmVxdWVzdC5oZWFkZXJzP1tcImlmLW5vbmUtbWF0Y2hcIl0gfHwgcmVxdWVzdC5oZWFkZXJzP1tcIklmLU5vbmUtTWF0Y2hcIl1cblxuICB0aW1lQ2hlY2s6ICh0aW1lc3RhbXApIC0+XG4gICAgdGltZXN0YW1wID0gbmV3IERhdGUoTnVtYmVyIHRpbWVzdGFtcCkudG9VVENTdHJpbmcoKVxuICAgIGlmIHRpbWVzdGFtcCA9PSBAaW5wdXRUaW1lXG4gICAgICB0aHJvdyBuZXcgTm90TW9kaWZpZWQoKVxuICAgIGVsc2VcbiAgICAgIEB0aW1lc3RhbXAgPSB0aW1lc3RhbXBcblxuICBoYXNoQ2hlY2s6IChjb250ZW50KSAtPlxuICAgIGV0YWcgPSBtZDUgY29udGVudFxuICAgIGlmIGV0YWcgPT0gQGlucHV0RVRhZ1xuICAgICAgdGhyb3cgbmV3IE5vdE1vZGlmaWVkKClcbiAgICBlbHNlXG4gICAgICBAZXRhZyA9IGV0YWdcbiAgICBjb250ZW50XG5cbm1ldGhvZCA9IChzaWduYXR1cmVzLCBoYW5kbGVyKSAtPlxuICAjIFRPRE86IHBhcnNlIEFjY2VwdCBoZWFkZXJcbiAgKHJlcXVlc3QsIGNvbnRleHQpIC0+XG4gICAgaWYgcmVxdWVzdC5zb3VyY2UgPT0gXCJjdWRkbGUtbW9ua2V5XCJcbiAgICAgIGxvZy5kZWJ1ZyBcIkRldGVjdGVkIGEgQ3VkZGxlIE1vbmtleSBwcmVoZWF0ZXIgaW52b2NhdGlvbi4gU2hvcnQgY2lyY3V0aW5nIHJlcXVlc3QgY3ljbGUuXCJcbiAgICAgIHJldHVybiB0cnVlXG5cbiAgICBpZiAoaGVhZGVyID0gcmVxdWVzdC5oZWFkZXJzP1snQXV0aG9yaXphdGlvbiddKT9cbiAgICAgIHtzY2hlbWUsIHBhcmFtcywgdG9rZW59ID0gcGFyc2UgaGVhZGVyXG4gICAgICBpZiB0b2tlblxuICAgICAgICByZXF1ZXN0LmF1dGhvcml6YXRpb24gPSB7c2NoZW1lLCB0b2tlbn1cbiAgICAgIGVsc2VcbiAgICAgICAgcmVxdWVzdC5hdXRob3JpemF0aW9uID0ge3NjaGVtZSwgcGFyYW1zfVxuXG4gICAgIyBQcm9jZXNzIHRoZSBoYW5kbGVyIHdoaWxlIG1pbmRpbmcgdGhlIGNvbmRpdGlvbmFsIGNhY2hlIGhlYWRlcnMuXG4gICAgaWYgIXNpZ25hdHVyZXMucmVzcG9uc2UuY2FjaGVcbiAgICAgIHJldHVybiBkYXRhOiBhd2FpdCBoYW5kbGVyIHJlcXVlc3QsIGNvbnRleHRcblxuICAgIHtsYXN0TW9kaWZpZWQsIGV0YWd9ID0gc2lnbmF0dXJlcy5yZXNwb25zZS5jYWNoZVxuICAgIGNhY2hlID0gbmV3IENhY2hlIHJlcXVlc3RcbiAgICBkYXRhID0gYXdhaXQgaGFuZGxlciByZXF1ZXN0LCBjb250ZXh0LCBjYWNoZVxuICAgIG1ldGFkYXRhID0gaGVhZGVyczoge31cbiAgICBpZiBsYXN0TW9kaWZpZWRcbiAgICAgIG1ldGFkYXRhLmhlYWRlcnNbXCJMYXN0LU1vZGlmaWVkXCJdID0gY2FjaGUudGltZXN0YW1wXG4gICAgaWYgZXRhZ1xuICAgICAgbWV0YWRhdGEuaGVhZGVycy5FVGFnID0gY2FjaGUuZXRhZyB8fCBtZDUgZGF0YVxuXG4gICAgcmV0dXJuIHtkYXRhLCBtZXRhZGF0YX1cblxuZXhwb3J0IGRlZmF1bHQgbWV0aG9kXG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=method.coffee