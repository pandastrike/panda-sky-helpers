"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

var _pandaAuthHeader = require("panda-auth-header");

var _logger = _interopRequireDefault(require("./logger"));

var _responses = _interopRequireDefault(require("./responses"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Cache, NotModified, md5, method;
({
  NotModified
} = _responses.default);

md5 = function (obj) {
  return _crypto.default.createHash('md5').update(JSON.stringify(obj), 'utf-8').digest("hex");
};

Cache = class Cache {
  constructor(request) {
    var ref, ref1, ref2, ref3;

    _logger.default.debug("Cache Headers:", request.headers);

    this.timestamp = null;
    this.inputTime = ((ref = request.headers) != null ? ref["if-modified-since"] : void 0) || ((ref1 = request.headers) != null ? ref1["If-Modified-Since"] : void 0);
    this.inputETag = ((ref2 = request.headers) != null ? ref2["if-none-match"] : void 0) || ((ref3 = request.headers) != null ? ref3["If-None-Match"] : void 0);
  }

  timeCheck(timestamp) {
    timestamp = new Date(Number(timestamp)).toUTCString();

    if (timestamp === this.inputTime) {
      throw new NotModified();
    } else {
      return this.timestamp = timestamp;
    }
  }

  hashCheck(content) {
    var etag;
    etag = md5(content);

    if (etag === this.inputETag) {
      throw new NotModified();
    } else {
      this.etag = etag;
    }

    return content;
  }

  setMaxAge(maxAge) {
    return this.maxAge = maxAge;
  }

};

method = function (signatures, handler) {
  // TODO: parse Accept header
  return async function (request, context) {
    var cache, data, etag, header, lastModified, maxAge, metadata, params, ref, scheme, token;

    if (request.source === "cuddle-monkey") {
      _logger.default.debug("Detected a Cuddle Monkey preheater invocation. Short circuting request cycle.");

      return true;
    }

    if ((header = (ref = request.headers) != null ? ref['Authorization'] : void 0) != null) {
      ({
        scheme,
        params,
        token
      } = (0, _pandaAuthHeader.parse)(header));

      if (token) {
        request.authorization = {
          scheme,
          token
        };
      } else {
        request.authorization = {
          scheme,
          params
        };
      }
    }

    if (!signatures.response.cache) {
      return {
        data: await handler(request, context)
      };
    }

    ({
      maxAge,
      lastModified,
      etag
    } = signatures.response.cache);
    cache = new Cache(request);
    data = await handler(request, context, cache);
    metadata = {
      headers: {}
    };

    if (maxAge === "manual") {
      metadata.headers["Cache-Control"] = `max-age=${cache.maxAge}`;
    } else {
      metadata.headers["Cache-Control"] = `max-age=${maxAge}`;
    }

    if (lastModified) {
      metadata.headers["Last-Modified"] = cache.timestamp;
    }

    if (etag) {
      metadata.headers.ETag = cache.etag || md5(data);
    }

    return {
      data,
      metadata
    };
  };
};

var _default = method;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,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LFFBQVEsQ0FBQyxPQUFULENBQUEsSUFBQSxHQUF3QixLQUFLLENBQUwsSUFBQSxJQUFjLEdBQUEsQ0FEeEMsSUFDd0MsQ0FBdEM7OztBQUVGLFdBQU87QUFBQSxNQUFBLElBQUE7QUFBQSxNQUFBO0FBQUEsS0FBUDtBQTdCRixHO0FBRk8sQ0FBVDs7ZUFpQ2UsTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDcnlwdG8gZnJvbSBcImNyeXB0b1wiXG5pbXBvcnQge3BhcnNlfSBmcm9tIFwicGFuZGEtYXV0aC1oZWFkZXJcIlxuaW1wb3J0IGxvZyBmcm9tIFwiLi9sb2dnZXJcIlxuaW1wb3J0IHJlc3BvbnNlcyBmcm9tIFwiLi9yZXNwb25zZXNcIlxue05vdE1vZGlmaWVkfSA9IHJlc3BvbnNlc1xuXG5tZDUgPSAob2JqKSAtPlxuICBDcnlwdG8uY3JlYXRlSGFzaCgnbWQ1JykudXBkYXRlKEpTT04uc3RyaW5naWZ5KG9iaiksICd1dGYtOCcpLmRpZ2VzdChcImhleFwiKVxuXG5jbGFzcyBDYWNoZVxuICBjb25zdHJ1Y3RvcjogKHJlcXVlc3QpIC0+XG4gICAgbG9nLmRlYnVnIFwiQ2FjaGUgSGVhZGVyczpcIiwgcmVxdWVzdC5oZWFkZXJzXG4gICAgQHRpbWVzdGFtcCA9IG51bGxcbiAgICBAaW5wdXRUaW1lID0gcmVxdWVzdC5oZWFkZXJzP1tcImlmLW1vZGlmaWVkLXNpbmNlXCJdIHx8IHJlcXVlc3QuaGVhZGVycz9bXCJJZi1Nb2RpZmllZC1TaW5jZVwiXVxuICAgIEBpbnB1dEVUYWcgPSByZXF1ZXN0LmhlYWRlcnM/W1wiaWYtbm9uZS1tYXRjaFwiXSB8fCByZXF1ZXN0LmhlYWRlcnM/W1wiSWYtTm9uZS1NYXRjaFwiXVxuXG4gIHRpbWVDaGVjazogKHRpbWVzdGFtcCkgLT5cbiAgICB0aW1lc3RhbXAgPSBuZXcgRGF0ZShOdW1iZXIgdGltZXN0YW1wKS50b1VUQ1N0cmluZygpXG4gICAgaWYgdGltZXN0YW1wID09IEBpbnB1dFRpbWVcbiAgICAgIHRocm93IG5ldyBOb3RNb2RpZmllZCgpXG4gICAgZWxzZVxuICAgICAgQHRpbWVzdGFtcCA9IHRpbWVzdGFtcFxuXG4gIGhhc2hDaGVjazogKGNvbnRlbnQpIC0+XG4gICAgZXRhZyA9IG1kNSBjb250ZW50XG4gICAgaWYgZXRhZyA9PSBAaW5wdXRFVGFnXG4gICAgICB0aHJvdyBuZXcgTm90TW9kaWZpZWQoKVxuICAgIGVsc2VcbiAgICAgIEBldGFnID0gZXRhZ1xuICAgIGNvbnRlbnRcblxuICBzZXRNYXhBZ2U6IChtYXhBZ2UpIC0+IEBtYXhBZ2UgPSBtYXhBZ2VcblxubWV0aG9kID0gKHNpZ25hdHVyZXMsIGhhbmRsZXIpIC0+XG4gICMgVE9ETzogcGFyc2UgQWNjZXB0IGhlYWRlclxuICAocmVxdWVzdCwgY29udGV4dCkgLT5cbiAgICBpZiByZXF1ZXN0LnNvdXJjZSA9PSBcImN1ZGRsZS1tb25rZXlcIlxuICAgICAgbG9nLmRlYnVnIFwiRGV0ZWN0ZWQgYSBDdWRkbGUgTW9ua2V5IHByZWhlYXRlciBpbnZvY2F0aW9uLiBTaG9ydCBjaXJjdXRpbmcgcmVxdWVzdCBjeWNsZS5cIlxuICAgICAgcmV0dXJuIHRydWVcblxuICAgIGlmIChoZWFkZXIgPSByZXF1ZXN0LmhlYWRlcnM/WydBdXRob3JpemF0aW9uJ10pP1xuICAgICAge3NjaGVtZSwgcGFyYW1zLCB0b2tlbn0gPSBwYXJzZSBoZWFkZXJcbiAgICAgIGlmIHRva2VuXG4gICAgICAgIHJlcXVlc3QuYXV0aG9yaXphdGlvbiA9IHtzY2hlbWUsIHRva2VufVxuICAgICAgZWxzZVxuICAgICAgICByZXF1ZXN0LmF1dGhvcml6YXRpb24gPSB7c2NoZW1lLCBwYXJhbXN9XG5cbiAgICAjIFByb2Nlc3MgdGhlIGhhbmRsZXIgd2hpbGUgbWluZGluZyB0aGUgY29uZGl0aW9uYWwgY2FjaGUgaGVhZGVycy5cbiAgICBpZiAhc2lnbmF0dXJlcy5yZXNwb25zZS5jYWNoZVxuICAgICAgcmV0dXJuIGRhdGE6IGF3YWl0IGhhbmRsZXIgcmVxdWVzdCwgY29udGV4dFxuXG4gICAge21heEFnZSwgbGFzdE1vZGlmaWVkLCBldGFnfSA9IHNpZ25hdHVyZXMucmVzcG9uc2UuY2FjaGVcbiAgICBjYWNoZSA9IG5ldyBDYWNoZSByZXF1ZXN0XG4gICAgZGF0YSA9IGF3YWl0IGhhbmRsZXIgcmVxdWVzdCwgY29udGV4dCwgY2FjaGVcbiAgICBtZXRhZGF0YSA9IGhlYWRlcnM6IHt9XG4gICAgaWYgbWF4QWdlID09IFwibWFudWFsXCJcbiAgICAgIG1ldGFkYXRhLmhlYWRlcnNbXCJDYWNoZS1Db250cm9sXCJdID0gXCJtYXgtYWdlPSN7Y2FjaGUubWF4QWdlfVwiXG4gICAgZWxzZVxuICAgICAgbWV0YWRhdGEuaGVhZGVyc1tcIkNhY2hlLUNvbnRyb2xcIl0gPSBcIm1heC1hZ2U9I3ttYXhBZ2V9XCJcbiAgICBpZiBsYXN0TW9kaWZpZWRcbiAgICAgIG1ldGFkYXRhLmhlYWRlcnNbXCJMYXN0LU1vZGlmaWVkXCJdID0gY2FjaGUudGltZXN0YW1wXG4gICAgaWYgZXRhZ1xuICAgICAgbWV0YWRhdGEuaGVhZGVycy5FVGFnID0gY2FjaGUuZXRhZyB8fCBtZDUgZGF0YVxuXG4gICAgcmV0dXJuIHtkYXRhLCBtZXRhZGF0YX1cblxuZXhwb3J0IGRlZmF1bHQgbWV0aG9kXG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=method.coffee